; ACME 0.96.4
; Kessessay - Main
; Apple II specs detection
; by Grouik/French Touch and fenarinarsa/French Touch
; 2020

!cpu 65c02
!convtab "a2txt.bin"    ; general ASCII LUT
!sl "lbl_main.txt"

!source "macros.a"

; ZEROPAGE
OUT2        = $12   ; +$13
Model       = $14
ROMversion  = $15
Temp        = $FF

; =============================================================================
; SYSCONST
VERTBLANK   = $C019 ;
; -------------------------------------
; CONST
L_MODEL     = $0480
L_CPU       = $0580
L_FRQ       = $0680
L_MB        = $0780
L_PROMPT    = $04A8
L_FT        = $07D0

M_Apple2        = 0
M_Apple2p       = 1
M_Apple2Jp      = 2
M_Apple3        = 3
M_Apple2e       = 4
M_Apple2eEn     = 5
M_Apple2eOC     = 6
M_Apple2c       = 7
M_Apple2cp      = 8
M_Apple2gs      = 9

; -------------------------------------

        *= $6000 ; ORG = $6000


START
!zone

        JSR $FC58       ; HOME

        +modify str_FT,print_s
        +modify L_FT,print_d
        LDX #0
        JSR PRINT

        +modify str_Prompt,print_s
        +modify L_PROMPT,print_d
        LDX #0
        JSR PRINT

ModelCheck
        +modify str_Model,print_s
        +modify L_MODEL,print_d
        LDX #0
        jsr PRINT
        STX Temp

        ; APPLE II MODEL DETECTION
        ; https://retrocomputing.stackexchange.com/questions/357/how-can-i-programmatically-tell-which-version-of-apple-ii-my-code-is-on
        LDA $FBB3
        CMP #$06                ; IIe/IIc/IIc+/IIgs = 06 
        BEQ .notII
        CMP #$38
        BEQ .a2
        CMP #$C9
        BEQ .a2jplus
        ; $FBB3 should be $EA here (no check)
        LDA $FB1E
        CMP #$AD
        BEQ .a2plus

        ; Apple III -> $FBB3=$EA, $FB1E=$8A
        LDA M_Apple3
        STA Model
        +modify str_Apple3,print_s
        JMP .printmodel

.a2     ; Apple II (original)
        LDA M_Apple2
        STA Model
        +modify str_Apple2,print_s
        JMP .printmodel
        
.a2jplus
        ; Apple II J-Plus -> $FBB3=$C9
        LDA M_Apple2Jp
        STA Model
        +modify str_Apple2Jp,print_s
        JMP .printmodel

.a2plus
        ; Apple II+ -> $FBB3=$EA, $FB1E=$AD
        LDA M_Apple2Jp
        STA Model
        +modify str_Apple2p,print_s
        JMP .printmodel

.notII  LDA $FBC0
        BEQ .IIc

        ; IIe or IIgs?
        SEC
        JSR $FE1F               ; GS TEST 
        BCC .IIgs

.IIe    ; IIe/IIe Enhanced/IIe Option Card
        LDA $FBC0
        CMP #$EA
        BNE .IIeEnh

        ; IIe
        LDA M_Apple2e
        STA Model
        +modify str_Apple2e,print_s
        JMP .printmodel

.IIeEnh ; $FBC0 should be $E0 (untested)
        LDA $FBDD
        CMP $02
        BEQ .IIeOC

        ; IIe Enhanced
        LDA M_Apple2eEn
        STA Model
        +modify str_Apple2eEn,print_s
        JMP .printmodel

.IIeOC  ; IIe Option Card
        LDA M_Apple2eOC
        STA Model
        +modify str_Apple2eOC,print_s
        JMP .printmodel

.IIgs   STY ROMversion
        +modify str_Apple2gs,print_s
        LDX Temp
        JSR PRINT
        LDA #M_Apple2gs
        STA Model
        BRA .checkROM

.IIc    ; Apple IIc -> $FBB3=$06, $FBC0=$00
        LDY $FBBF
        STY ROMversion
        CPY #$05
        BEQ .IIcp
        
        LDA M_Apple2c
        STA Model
        +modify str_Apple2c,print_s
        JSR PRINT
        BRA .checkROM

        ; IIc+
.IIcp   LDA #M_Apple2cp
        STA Model
        +modify str_Apple2cp,print_s
        BRA .printmodel

.checkROM
        ; ROM version
        LDY ROMversion
        CPY #$00
        BNE +
        +modify str_ROM0,print_s
        BRA .printmodel
+       CPY #$01
        BNE +
        +modify str_ROM01,print_s
        BRA .printmodel
+       CPY #$03
        BNE +
        +modify str_ROM3,print_s
        BRA .printmodel
+       CPY #$04
        BNE +
        +modify str_ROM4,print_s
        BRA .printmodel
+       CPY #$FF
        BNE .endmodel
        +modify str_ROM255,print_s
        ; BRA .printmodel

.printmodel
        JSR PRINT
.endmodel

CPU
        +modify L_CPU,print_d
        +modify str_CPU,print_s
        LDX #0
        JSR PRINT

        ; CPU DETECTION
        ; Decimal mode trick (documented behavior)
        SED             ; BCD mode
        LDA #$99
        CLC
        ADC #$01
        BMI .c6502      ; 6502

        ; 65C02/65816
        CLD             ; binary mode
        !byte $EB       ; XBA -> B=A (65C816, NOP on 65C02)
        DEC             ; A=$FF
        !byte $EB       ; XBA -> A=B on 65C816
        INC             ; A=$01 65C816, A=$00 on 65C02
        BEQ .c65c02
        +modify str_CPU65C816,print_s
        JSR PRINT
        BRA .endcpu

.c65c02
        +modify str_CPU65C02,print_s
        JSR PRINT
        BRA .endcpu

        ; 6502
.c6502  CLD
        +modify str_CPU6502,print_s
        JSR PRINT
.endcpu

        LDA Model

        ; IIc+, IIgs stop here
        CMP #M_Apple2cp
        BEQ *                   
        CMP #M_Apple2gs
        BEQ *

        CMP #M_Apple3+1
        BCS Frequency           ; No Frequency test for II/II+/III
        JMP Mockingboard

Frequency
        LDA $FBC0
        BEQ +
        JMP Frequency_IIe
+       JMP Frequency_IIc

        !align 255,0

Frequency_IIe
        ; REFRESH FREQUENCY DETECTION
        LDA #$7F                ; IIe
-       CMP VERTBLANK       
        BPL -                   ; wait for end of VBL                                
-       CMP VERTBLANK        
        BMI -                   ; wait for end of display

--      INC COUNTREF            ; 6 ; inc counter

        LDX #$09                ;                           
-       DEX                     ;                   
        BNE -                   ; = 46 cycles
                                ; 6 + 46 + 4 + 3 + 4 + 3 = 65 !

        LDA COUNTREF            ; 4

        LDA #$7F                ; 3
        CMP VERTBLANK           ; 4
        BPL   --                ; 3 => looping while we are in VBL

        LDA COUNTREF
        CMP #72                 ; >= 72 then 50 HZ (120*65 cycles of VBL)
        BCS frq50Hz
        JMP frq60Hz

Frequency_IIc
        SEI             ; disable interrupts
 	STA $C079 	; enable IOU access
 	STA $C05B 	; enable VBL int
 	STA $C078 	; disable IOU access
        LDA $C070       ; reset VSYNC IRF (Interrupt Flag)

        ; REFRESH FREQUENCY DETECTION
-       LDA VERTBLANK   ; wait for VSYNC IRQ (Interrupt Request)
        BPL -
        LDA $C070       ; reset VSYNC IRF

--      INC COUNTREF    ; 6 ; inc counter
        LDX #196        ; 3         )               
-       DEX             ; 2*196     )             
        BNE -           ; 3*196 + 2 ) = 985 cycles
        NOP             ; 2
        LDA VERTBLANK   ; 4
        BPL --          ; 3 => looping while no VSYNC IRQ
        ; 6 + 985 + 2 + 4 + 3 = 1000 cycles

 	STA $C079 	; enable IOU access
 	STA $C05A 	; disable VBL int
 	STA $C078 	; disable IOU access
        LDA $C070       ; reset VSYNC IRF

        LDA COUNTREF
;        STA L_FRQ+39    ; uncomment for debug
        CMP #20         ; frame is >= 20000 cycles, then 50Hz
                        ; PAL = 20280 cycles
                        ; NTSC = 17030 cycles
        BCS frq50Hz
        JMP frq60Hz

frq50Hz
        LDX #'5'
        STX str_FRQm
frq60Hz 
        ; print result
        +modify str_FRQ,print_s
        +modify L_FRQ,print_d
        LDX #0
        JSR PRINT  

Mockingboard
        ; MOCKINGBOARD DETECTION (->OUT2)
        LDA Model
        CMP #M_Apple2c
        BNE .noMockingboard4c
        LDA #$FF
        STA $C403       ; activates MB 4c (IIc)
        STA $C404

.noMockingboard4c
        LDA #00
        STA OUT2
        LDX #0          
bdet    LDA #$01                ; start from $C1 to $C7
        INC .MBSlot+1           ; inc text slot #
        ORA #$C0                ; -> $Cx
        STA OUT2+1
        LDY #04                 ; $CX04
        LDA (OUT2),Y            ; timer 6522 (Low Order Counter) - it's a countdown!
        STA Temp                ; 3 cycles
        LDA (OUT2),Y            ; + 5 cycles = 8 cycles between two timer access
        SEC                     ; 
        SBC Temp                ;
        CMP #$F8                ; -8 (countdown) ?
        BNE +                   ; branch if not found
        ; MB found
.MBSlot LDA #'0'
        STA str_MBm,X           ; add found slot to result string
        INX
        INX
+       INC bdet+1              ; testing next "slot"
        LDY bdet+1
        CPY #8
        BNE bdet                ; looping from 1 to 7

        ; print result
        +modify str_MB,print_s
        +modify L_MB,print_d
        LDX #0
        JSR PRINT       

end     JMP *

PRINT   LDY #0
print_s LDA str_Model,Y
        BEQ +
print_d STA $400,X
        INX
        INY
        BNE print_s
+       RTS

COUNTREF    !byte 0x00  ; counter refresh detection

str_Model       !text "       MODEL: "
                !byte 0
str_Apple2      !text "APPLE II"
                !byte 0
str_Apple2p     !text "APPLE II+"
                !byte 0
str_Apple2Jp    !text "APPLE II J-PLUS"
                !byte 0
str_Apple3      !text "APPLE III"
                !byte 0
str_Apple2e     !text "Apple IIe"
                !byte 0
str_Apple2eEn   !text "Apple IIe Enhanced"
                !byte 0
str_Apple2eOC   !text "Apple IIe Option Card"
                !byte 0
str_Apple2c     !text "Apple IIc"
                !byte 0
str_Apple2cp    !text "Apple IIc+"
                !byte 0
str_Apple2gs    !text "Apple IIgs"
                !byte 0
str_ROM0        !text " (ROM 0)"
                !byte 0
str_ROM01       !text " (ROM 01)"
                !byte 0
str_ROM3        !text " (ROM 3)"
                !byte 0
str_ROM4        !text " (ROM 4)"
                !byte 0
str_ROM255      !text " (ROM 255)"
                !byte 0
str_CPU         !text "         CPU: "
                !byte 0
str_CPU6502     !text "6502"
                !byte 0
str_CPU65C02    !text "65C02"
                !byte 0
str_CPU65C816   !text "65C816"
                !byte 0
str_MB          !text "MOCKINGBOARD: "
str_MBm         !text "X             "
                !byte 0
str_FRQ         !text "   VIDEO FRQ: "
str_FRQm        !text "60HZ"
                !byte 0
str_Prompt      !text "      PROMPT: ]"
                !byte 0
str_FT          !text "                    KESSESSAY 1.1/"
                !byte $06,$14
                !text "2020"
                !byte 0
