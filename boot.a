; ACME 0.96.4
; boot.a - Minimal version
; boot0 (T0/S0) / boot1 (FLOAD) / boot2 (MAIN) 
; by Grouik/French Touch and fenarinarsa/French Touch
; 2020


!cpu 65c02
!convtab "a2txt.bin"    ; incorporation table caractère APPLE II (normal) générale
!sl "lbl_boot.txt"

; =============================================================================
; ZEROPAGE

bSLOT       = $02   ; SLOT * 0x10

; -------------------------------------
; CONST
MAIN        = $6000     ; main program to run once boot.b is done
MAIN_SIZE   = 3    ; in sectors

; -------------------------------------

        *= $800 ; ORG = $800

!byte 01        ; reserved byte: number of 256 bytes sectors to load for boot.b

START
!zone

; here the floppy drive motor is running, x = $60 (if slot 6)

	; $801/$802/$803
	JMP INIT		; first run, we do all the init sequence
	; BOOT 1 (FLOAD)    
	DEC OffHi		;                                                             
LOAD    LDA OffHi
	CMP #(>MAIN-1)	; are we done? 
	BEQ +
	STA $27
	LDA nSector	; n Sectors
	STA $3D
MODSLOT	JMP $C65C       ; reading with the Disk II ROM 
                        ; the ROM rout ends with a JMP $801
			; /!\ using ZP $26,$27,$2B,$3C,$3D,$40,$41 

+       JMP MAIN	; jump to main. We're done!                                        

INIT    STX bSLOT       ; save slot number SLOT*0x10
        ; ---------
        ; modifying calling address for ROM DISK II based on slot#
        TXA
        LSR
        LSR
        LSR
        LSR                     ; $x0 -> $0x
        ORA #$C0                ; $0x -> $Cx
        STA MODSLOT+2           ; saving

        ; LOADING main.b FROM DISK

	LDA #$CE	; writing DEC nSector to $801 
	STA $801	; for the JMP $801 at $C605
	LDA #<nSector	; do a loop with the code at $801
	STA $802
	LDA #>nSector
	STA $803
	LDX #$60	; SLOT#6*$10
	JMP LOAD	; will return at $801



OffHi       !byte (>MAIN)+MAIN_SIZE-1   ; where to load the first sector
nSector     !byte MAIN_SIZE             ; last sector to read for MAIN
